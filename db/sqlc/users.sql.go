// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "users" (
    "Username",
    "Password",
    "FirstName",
    "LastName",
    "Email"
)
VALUES (
    $1 :: VARCHAR,
    $2 :: VARCHAR,
    $3 :: VARCHAR,
    $4 :: VARCHAR,
    $5 :: VARCHAR
) RETURNING "Id", "Username", "Password", "FirstName", "LastName", "Email", "Password_At_Change", "Created_At"
`

type CreateUserParams struct {
	Username  string `json:"Username"`
	Password  string `json:"Password"`
	FirstName string `json:"FirstName"`
	LastName  string `json:"LastName"`
	Email     string `json:"Email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Username,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordAtChange,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT
    "Id", "Username", "Password", "FirstName", "LastName", "Email", "Password_At_Change", "Created_At"
FROM
    "users"
WHERE
    "Username" = $1 :: VARCHAR
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Username,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordAtChange,
		&i.CreatedAt,
	)
	return i, err
}

const updatePasswordUser = `-- name: UpdatePasswordUser :one
UPDATE 
    "users"
SET 
    "Password" = $1
WHERE 
    "Id" = $2
RETURNING "Id", "Username", "Password", "FirstName", "LastName", "Email", "Password_At_Change", "Created_At"
`

type UpdatePasswordUserParams struct {
	Password string `json:"Password"`
	Id       int64  `json:"Id"`
}

func (q *Queries) UpdatePasswordUser(ctx context.Context, arg UpdatePasswordUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updatePasswordUser, arg.Password, arg.Id)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Username,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordAtChange,
		&i.CreatedAt,
	)
	return i, err
}
