// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: data.sql

package db

import (
	"context"
)

const getAge = `-- name: GetAge :many

SELECT
    "age"
FROM
    "data"
`

func (q *Queries) GetAge(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getAge)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var age int32
		if err := rows.Scan(&age); err != nil {
			return nil, err
		}
		items = append(items, age)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGender = `-- name: GetGender :many

SELECT
    "gender"
FROM
    "data"
`

func (q *Queries) GetGender(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getGender)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var gender string
		if err := rows.Scan(&gender); err != nil {
			return nil, err
		}
		items = append(items, gender)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGender = `-- name: ListGender :many
SELECT 
    gender, age, "Investment_Avenues", "Mutual_Funds", "Equity_Market", "Debentures", "Government_Bonds", "Fixed_Deposits", "PPF", "Gold", "Stock_Marktet", "Factor", "Objective", "Purpose", "Duration", "Invest_Monitor", "Expect", "Avenue", "What are your savings objectives?", "Reason_Equity", "Reason_Mutual", "Reason_Bonds", "Reason_FD", "Source"
FROM
    "data"
WHERE 
    "gender" = $1 :: VARCHAR
`

func (q *Queries) ListGender(ctx context.Context, gender string) ([]Datum, error) {
	rows, err := q.db.QueryContext(ctx, listGender, gender)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Datum{}
	for rows.Next() {
		var i Datum
		if err := rows.Scan(
			&i.Gender,
			&i.Age,
			&i.InvestmentAvenues,
			&i.MutualFunds,
			&i.EquityMarket,
			&i.Debentures,
			&i.GovernmentBonds,
			&i.FixedDeposits,
			&i.PPF,
			&i.Gold,
			&i.StockMarktet,
			&i.Factor,
			&i.Objective,
			&i.Purpose,
			&i.Duration,
			&i.InvestMonitor,
			&i.Expect,
			&i.Avenue,
			&i.WhatAreYourSavingsObjectives,
			&i.ReasonEquity,
			&i.ReasonMutual,
			&i.ReasonBonds,
			&i.ReasonFD,
			&i.Source,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
